SET(AS_VERSION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/modules/core/include/as/core/version.hpp")
file(STRINGS "${AS_VERSION_FILE}" AS_VERSION_PARTS REGEX "#define AS_VERSION_[A-Z]+[ ]+" )

string(REGEX REPLACE ".+AS_VERSION_MAJOR[ ]+([0-9]+).*" "\\1" AS_VERSION_MAJOR "${AS_VERSION_PARTS}")
string(REGEX REPLACE ".+AS_VERSION_MINOR[ ]+([0-9]+).*" "\\1" AS_VERSION_MINOR "${AS_VERSION_PARTS}")
string(REGEX REPLACE ".+AS_VERSION_REVISION[ ]+([0-9]+).*" "\\1" AS_VERSION_PATCH "${AS_VERSION_PARTS}")
string(REGEX REPLACE ".+AS_VERSION_STATUS[ ]+\"([^\"]*)\".*" "\\1" AS_VERSION_STATUS "${AS_VERSION_PARTS}")

set(AS_VERSION_PLAIN "${AS_VERSION_MAJOR}.${AS_VERSION_MINOR}.${AS_VERSION_PATCH}")

set(AS_VERSION "${AS_VERSION_PLAIN}${AS_VERSION_STATUS}")

set(AS_SOVERSION "${AS_VERSION_MAJOR}.${AS_VERSION_MINOR}")
set(AS_LIBVERSION "${AS_VERSION_MAJOR}.${AS_VERSION_MINOR}.${AS_VERSION_PATCH}")

# create a dependency on the version file
# we never use the output of the following command but cmake will rerun automatically if the version file changes
configure_file("${AS_VERSION_FILE}" "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/as_junk/version.junk" COPYONLY)

as_update(AS_VS_VER_FILEVERSION_QUAD "${AS_VERSION_MAJOR},${AS_VERSION_MINOR},${AS_VERSION_PATCH},0")
as_update(AS_VS_VER_PRODUCTVERSION_QUAD "${AS_VERSION_MAJOR},${AS_VERSION_MINOR},${AS_VERSION_PATCH},0")
as_update(AS_VS_VER_FILEVERSION_STR "${AS_VERSION}")
as_update(AS_VS_VER_PRODUCTVERSION_STR "${AS_VERSION}")
as_update(AS_VS_VER_PRODUCTNAME_STR "AS library")
as_update(AS_VS_VER_COMMENTS_STR "NONE")
