# In order to compile your application under cygwin
# you might need to define NDK_USE_CYGPATH=1 before calling the ndk-build

USER_LOCAL_PATH:=$(LOCAL_PATH)

USER_LOCAL_C_INCLUDES:=$(LOCAL_C_INCLUDES)
USER_LOCAL_CFLAGS:=$(LOCAL_CFLAGS)
USER_LOCAL_STATIC_LIBRARIES:=$(LOCAL_STATIC_LIBRARIES)
USER_LOCAL_SHARED_LIBRARIES:=$(LOCAL_SHARED_LIBRARIES)
USER_LOCAL_LDLIBS:=$(LOCAL_LDLIBS)

LOCAL_PATH:=$(subst ?,,$(firstword ?$(subst \, ,$(subst /, ,$(call my-dir)))))

AS_TARGET_ARCH_ABI:=$(TARGET_ARCH_ABI)
AS_THIS_DIR:=$(patsubst $(LOCAL_PATH)\\%,%,$(patsubst $(LOCAL_PATH)/%,%,$(call my-dir)))
AS_MK_DIR:=$(dir $(lastword $(MAKEFILE_LIST)))
AS_3RDPARTY_LIBS_DIR:=@AS_3RDPARTY_LIBS_DIR_CONFIGCMAKE@
AS_BASEDIR:=@AS_BASE_INCLUDE_DIR_CONFIGCMAKE@
AS_LOCAL_C_INCLUDES:=@AS_INCLUDE_DIRS_CONFIGCMAKE@
AS_MODULES:=@AS_MODULES_CONFIGMAKE@
AS_SUB_MK:=$(call my-dir)/AS-$(TARGET_ARCH_ABI).mk

ifeq ($(AS_LIB_TYPE),)
    AS_LIB_TYPE:=@AS_LIBTYPE_CONFIGMAKE@
endif

ifeq ($(AS_LIB_TYPE),SHARED)
    AS_LIBS:=@AS_LIBS_CONFIGMAKE@
    AS_LIB_TYPE:=@AS_LIBTYPE_CONFIGMAKE@
else
    AS_LIBS:=$(AS_MODULES)
    AS_LIB_TYPE:=@AS_STATIC_LIBTYPE_CONFIGMAKE@
endif

ifeq ($(AS_LIB_TYPE),SHARED)
    AS_3RDPARTY_COMPONENTS:=
    AS_EXTRA_COMPONENTS:=
else
    include $(AS_SUB_MK)
endif

ifeq ($(AS_LIB_TYPE),SHARED)
    AS_LIBS_DIR:=@AS_LIBS_DIR_CONFIGCMAKE@
    AS_LIB_SUFFIX:=so
else
    AS_LIBS_DIR:=@AS_LIBS_ARCHIVE_DIR_CONFIGCMAKE@
    AS_LIB_SUFFIX:=a
    AS_INSTALL_MODULES:=on
endif

define add_as_module
    include $(CLEAR_VARS)
    LOCAL_MODULE:=as_$1
    LOCAL_SRC_FILES:=$(AS_LIBS_DIR)/libas_$1.$(AS_LIB_SUFFIX)
    include $(PREBUILT_$(AS_LIB_TYPE)_LIBRARY)
endef

define add_as_3rdparty_component
    include $(CLEAR_VARS)
    LOCAL_MODULE:=$1
    LOCAL_SRC_FILES:=$(AS_3RDPARTY_LIBS_DIR)/lib$1.a
    include $(PREBUILT_STATIC_LIBRARY)
endef

ifeq ($(AS_MK_$(AS_TARGET_ARCH_ABI)_ALREADY_INCLUDED),)
    ifeq ($(AS_INSTALL_MODULES),on)
        $(foreach module,$(AS_LIBS),$(eval $(call add_as_module,$(module))))
    endif

    $(foreach module,$(AS_3RDPARTY_COMPONENTS),$(eval $(call add_as_3rdparty_component,$(module))))

    ifneq ($(AS_BASEDIR),)
        AS_LOCAL_C_INCLUDES += $(foreach mod, $(AS_MODULES), $(AS_BASEDIR)/modules/$(mod)/include)
    endif

    #turn off module installation to prevent their redefinition
    AS_MK_$(AS_TARGET_ARCH_ABI)_ALREADY_INCLUDED:=on
endif

ifeq ($(AS_LOCAL_CFLAGS),)
    AS_LOCAL_CFLAGS := -fPIC -DANDROID -fsigned-char
endif

include $(CLEAR_VARS)

LOCAL_C_INCLUDES:=$(USER_LOCAL_C_INCLUDES)
LOCAL_CFLAGS:=$(USER_LOCAL_CFLAGS)
LOCAL_STATIC_LIBRARIES:=$(USER_LOCAL_STATIC_LIBRARIES)
LOCAL_SHARED_LIBRARIES:=$(USER_LOCAL_SHARED_LIBRARIES)
LOCAL_LDLIBS:=$(USER_LOCAL_LDLIBS)

# Details: #10229
ifeq ($(AS_SKIP_ANDROID_IPP_FIX_1),)
  LOCAL_LDFLAGS += -Wl,--exclude-libs,libippicv.a
  LOCAL_LDFLAGS += -Wl,--exclude-libs,libippiw.a
else
  ifeq ($(AS_SKIP_ANDROID_IPP_FIX_2),)
    LOCAL_LDFLAGS += -Wl,-Bsymbolic
  endif
endif

LOCAL_C_INCLUDES += $(AS_LOCAL_C_INCLUDES)
LOCAL_CFLAGS     += $(AS_LOCAL_CFLAGS)

ifeq ($(AS_INSTALL_MODULES),on)
    LOCAL_$(AS_LIB_TYPE)_LIBRARIES += $(foreach mod, $(AS_LIBS), as_$(mod))
else
    $(call __ndk_info,AS: You should ignore warning about 'non-system libraries in linker flags' and 'as_java' library.)
    $(call __ndk_info,        'AS_INSTALL_MODULES:=on' can be used to build APK with included AS binaries)
    LOCAL_LDLIBS += -L$(call host-path,$(LOCAL_PATH)/$(AS_LIBS_DIR)) $(foreach lib, $(AS_LIBS), -las_$(lib))
endif

ifeq ($(AS_LIB_TYPE),STATIC)
    LOCAL_STATIC_LIBRARIES += $(AS_3RDPARTY_COMPONENTS)
endif

LOCAL_LDLIBS += $(foreach lib,$(AS_EXTRA_COMPONENTS), -l$(lib))

#restore the LOCAL_PATH
LOCAL_PATH:=$(USER_LOCAL_PATH)
